from sqlalchemy import text, or_, func, and_, case#from sqlalchemy.dialects import postgresqlfrom game.entities import User, World, Area, Town, Hero, Warshipfrom engine.modules.auth.repository import AbstractUserRepositoryfrom engine.modules.worlds.repository import AbstractWorldInstanceRepositoryfrom engine.repository import Repository, Entityfrom sqlalchemy.orm.attributes import flag_modified@Entity(World)class WorldRepository(Repository):    def get_first(self):        return self.session.query(World).first()    def find_by_invite(self, invlink):        return self.session.query(World)\            .filter(World.invlink == invlink)\        .first()@Entity(Area)class AreaRepository(AbstractWorldInstanceRepository):    def list(self, ids):        return self.session.query(Area)\            .filter(Area.id.in_(ids))\        .all()    pass@Entity(Town)class TownRepository(AbstractWorldInstanceRepository):    def list_all(self, wid=None, has_player=None):        if has_player is None:            return super().list_all(wid)        elif has_player:            # lists towns that are associated with a user            return self.session.query(User.username, Town) \                .filter(User.wid == wid) \                .join(Town, and_(User.iso == Town.iso, User.wid == Town.wid)) \                .all()        else:            # lists towns that are empty            return self.session.query(Town) \                .filter(Town.wid == wid) \                .outerjoin(User, and_(User.iso == Town.iso, User.wid == Town.wid)) \                .filter(User.iso == None)\                .all()    def list_both(self, wid, wid2):        """        Lists all towns and player uids in both worlds, paired        """        return self.session.query(Town, User.uid) \            .filter(or_(Town.wid == wid, Town.wid == wid2)) \            .outerjoin(User, and_(User.iso == Town.iso, Town.wid == User.wid))\        .all()    def get_resources(self, iso, wid):        return self.session.query(Town.resources)\            .filter(Town.wid == wid, Town.iso == iso)\        .first()    def mark_changed(self, ent):        flag_modified(ent, 'resources')        flag_modified(ent, 'buildings')        flag_modified(ent, 'gatherers')        flag_modified(ent, 'placements')    # def set_world(self, isos, wid, commit=True):    #     self.session.query(Town)\    #         .filter(Town.iso.in_(isos), Town.wid == wid)\    #         .update({Town.wid: wid}, synchronize_session='fetch')    #    #     if commit:    #         self.session.commit()@Entity(Warship)class WarshipRepository(AbstractWorldInstanceRepository):    def get_first(self):        return self.session.query(World).first()    def list_in_town(self, iso, wid):        return self.session.query(Warship)\            .filter(Warship.iso == iso, Warship.wid == wid)\        .all()    def summarize_offers(self, iso, wid):        return self.session.query(func.sum(case(            whens=((Warship.is_sell, Warship.material_amount),),else_=Warship.gold        )))\            .filter(Warship.iso == iso, Warship.wid == wid)\        .scalar()@Entity(Hero)class HeroRepository(AbstractWorldInstanceRepository):    def list_in_town(self, iso, wid):        return self.session.query(Hero)\            .filter(Hero.iso == iso, Hero.wid == wid)\        .all()